if [ -z "${ROS_WS}" ]; then
  export ROS_WS=~/livox_ws
fi
function cb() {
    common_args=(
      --symlink-install
      --parallel-workers "$(($(nproc)-2))"
      --cmake-args
      "-DCMAKE_BUILD_TYPE=Release"
       --no-warn-unused-cli # suppress CMake warning of "Manually-specified variables were not used by the project:"
    )

    if [ $# -gt 0 ]; then
      colcon build --packages-up-to "$1" "${common_args[@]}"
    else
      colcon build "${common_args[@]}"
    fi
}

function cs() {
    # Check if the ROS_WS/install/setup.bash exists before sourcing
    if [ -f "${ROS_WS}/install/setup.bash" ]; then
        source "${ROS_WS}/install/setup.bash"
    else
        echo "Warning: ${ROS_WS}/install/setup.bash does not exist."
    fi
}

function cc() {
    if [[ $# -gt 0 && $1 != "-y" ]]; then
      colcon clean packages --packages-select "$@"
    else
      colcon clean workspace "$@"
    fi

    # avoid warning of "the environment variable AMENT_PREFIX_PATH doesn't exist"
    export AMENT_PREFIX_PATH=$(echo $AMENT_PREFIX_PATH | tr ':' '\n' | grep -v "${ROS_WS}" | tr '\n' ':' | sed 's/:$//')
    export CMAKE_PREFIX_PATH=$(echo $CMAKE_PREFIX_PATH | tr ':' '\n' | grep -v "${ROS_WS}" | tr '\n' ':' | sed 's/:$//')
}

source /opt/ros/${ROS_DISTRO}/setup.bash
if type register-python-argcomplete3 > /dev/null 2>&1; then
  eval "$(register-python-argcomplete3 ros2)"
  eval "$(register-python-argcomplete3 colcon)"
  source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash
elif type register-python-argcomplete > /dev/null 2>&1; then
  eval "$(register-python-argcomplete ros2)"
  eval "$(register-python-argcomplete colcon)"
fi

# colcon_cd
source /usr/share/colcon_cd/function/colcon_cd.sh
export _colcon_cd_root=${ROS_WS}
alias ccd='colcon_cd'

# alias definitions
alias rdi="rosdep install --from-paths src --ignore-src -r -y"
alias rkill="ps -ef | grep -e /opt/ros/\${ROS_DISTRO} -e /aichallenge -e /autoware | grep -v grep | awk '{cmd = \"\"; for(i=8;i<=NF;i++) cmd = cmd \$i \" \"; print \$2, cmd}' | while read pid cmd; do echo \"kill process: PID \$pid Command: \$cmd\"; kill -9 \$pid; done"

# Register completion for colcon
_colcon_package_complete() {
    local current_word
    current_word="${COMP_WORDS[COMP_CWORD]}"

    # Get the list of package names using colcon list
    local packages
    packages=$(COLCON_LOG_PATH=/dev/null colcon list --base-paths ${ROS_WS} | awk '{print $1}' 2>/dev/null)

    # Filter the package names based on the current word being completed
    COMPREPLY=($(compgen -W "$packages" -- "$current_word"))
}
complete -F _colcon_package_complete colcon_cd
complete -F _colcon_package_complete ccd
complete -F _colcon_package_complete cb
complete -F _colcon_package_complete cc
complete -F _colcon_package_complete ct

# Avoid build warnings from setuptools with colcon and import warnings from pkg_resources with vcstool
# - https://robotics.stackexchange.com/questions/24230/setuptoolsdeprecationwarning-in-ros2-humble/24349#24349
# - https://github.com/ament/ament_cmake/issues/382
# - https://github.com/dirk-thomas/vcstool/issues/269
export PYTHONWARNINGS="ignore:easy_install command is deprecated,ignore:setup.py install is deprecated,ignore:pkg_resources is deprecated as an API"

# source ROS_WS
cs
